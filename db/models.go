// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/jackc/pgtype"
)

type Language string

const (
	LanguageNone Language = "none"
	LanguageSv   Language = "sv"
	LanguageEn   Language = "en"
)

func (e *Language) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Language(s)
	case string:
		*e = Language(s)
	default:
		return fmt.Errorf("unsupported scan type for Language: %T", src)
	}
	return nil
}

type NullLanguage struct {
	Language Language
	Valid    bool // Valid is true if Language is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLanguage) Scan(value interface{}) error {
	if value == nil {
		ns.Language, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Language.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLanguage) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Language), nil
}

type LunchMenu struct {
	ID        int32
	Resturant string
	Date      time.Time
	Language  Language
	Name      string
	Menu      pgtype.JSONB
	FetchedAt time.Time
}

type News struct {
	ID        int32
	Resturant string
	Date      time.Time
	Language  Language
	Name      string
	Menu      pgtype.JSONB
	FetchedAt time.Time
}
