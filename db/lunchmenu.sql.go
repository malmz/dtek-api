// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: lunchmenu.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgtype"
)

type CreateLunchMenusParams struct {
	Resturant string
	Date      time.Time
	Language  Language
	Name      string
	Menu      pgtype.JSONB
}

const getLunchByDate = `-- name: GetLunchByDate :one
SELECT id, resturant, date, language, name, menu, fetched_at
FROM lunch_menus
WHERE resturant = $1
    AND date = $2
    AND language = $3
    OR language = 'none'
`

type GetLunchByDateParams struct {
	Resturant string
	Date      time.Time
	Language  Language
}

func (q *Queries) GetLunchByDate(ctx context.Context, arg GetLunchByDateParams) (LunchMenu, error) {
	row := q.db.QueryRow(ctx, getLunchByDate, arg.Resturant, arg.Date, arg.Language)
	var i LunchMenu
	err := row.Scan(
		&i.ID,
		&i.Resturant,
		&i.Date,
		&i.Language,
		&i.Name,
		&i.Menu,
		&i.FetchedAt,
	)
	return i, err
}

const getLunchByDateRange = `-- name: GetLunchByDateRange :many
SELECT id, resturant, date, language, name, menu, fetched_at
FROM lunch_menus
WHERE resturant = $1
    AND date >= $2
    AND date <= $3
    AND language = $4
    OR language = 'none'
`

type GetLunchByDateRangeParams struct {
	Resturant string
	Date      time.Time
	Date_2    time.Time
	Language  Language
}

func (q *Queries) GetLunchByDateRange(ctx context.Context, arg GetLunchByDateRangeParams) ([]LunchMenu, error) {
	rows, err := q.db.Query(ctx, getLunchByDateRange,
		arg.Resturant,
		arg.Date,
		arg.Date_2,
		arg.Language,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LunchMenu
	for rows.Next() {
		var i LunchMenu
		if err := rows.Scan(
			&i.ID,
			&i.Resturant,
			&i.Date,
			&i.Language,
			&i.Name,
			&i.Menu,
			&i.FetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
